/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommentWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  FollowingWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  LikedTweetWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // root type
    commentId?: number | null; // Int
    content?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
  }
  Following: { // root type
    avatar: string; // String!
    followId: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  LikedTweet: { // root type
    id: number; // Int!
    likedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  Profile: { // root type
    avatar?: string | null; // String
    bio?: string | null; // String
    id: number; // Int!
    location?: string | null; // String
    website?: string | null; // String
  }
  Query: {};
  Tweet: { // root type
    content?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CommentWhereUniqueInput: NexusGenInputs['CommentWhereUniqueInput'];
  FollowingWhereUniqueInput: NexusGenInputs['FollowingWhereUniqueInput'];
  LikedTweetWhereUniqueInput: NexusGenInputs['LikedTweetWhereUniqueInput'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // field return type
    Comment: NexusGenRootTypes['Comment'] | null; // Comment
    commentId: number | null; // Int
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    User: NexusGenRootTypes['User'] | null; // User
  }
  Following: { // field return type
    avatar: string; // String!
    followId: number; // Int!
    id: number; // Int!
    name: string; // String!
    User: NexusGenRootTypes['User'] | null; // User
  }
  LikedTweet: { // field return type
    id: number; // Int!
    likedAt: NexusGenScalars['DateTime']; // DateTime!
    tweet: NexusGenRootTypes['Tweet']; // Tweet!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createProfile: NexusGenRootTypes['Profile'] | null; // Profile
    createReply: NexusGenRootTypes['Comment'] | null; // Comment
    createTweet: NexusGenRootTypes['Tweet'] | null; // Tweet
    deleteFollow: NexusGenRootTypes['Following'] | null; // Following
    deleteLike: NexusGenRootTypes['LikedTweet'] | null; // LikedTweet
    follow: NexusGenRootTypes['Following'] | null; // Following
    likeTweet: NexusGenRootTypes['LikedTweet'] | null; // LikedTweet
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    updateProfile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  Profile: { // field return type
    avatar: string | null; // String
    bio: string | null; // String
    id: number; // Int!
    location: string | null; // String
    website: string | null; // String
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    tweet: NexusGenRootTypes['Tweet'] | null; // Tweet
    tweets: Array<NexusGenRootTypes['Tweet'] | null> | null; // [Tweet]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Tweet: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    likes: NexusGenRootTypes['LikedTweet'][]; // [LikedTweet!]!
  }
  User: { // field return type
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    email: string; // String!
    Following: NexusGenRootTypes['Following'][]; // [Following!]!
    id: number; // Int!
    likedTweet: NexusGenRootTypes['LikedTweet'][]; // [LikedTweet!]!
    name: string | null; // String
    Profile: NexusGenRootTypes['Profile'] | null; // Profile
    tweets: NexusGenRootTypes['Tweet'][]; // [Tweet!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Comment: { // field return type name
    Comment: 'Comment'
    commentId: 'Int'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    User: 'User'
  }
  Following: { // field return type name
    avatar: 'String'
    followId: 'Int'
    id: 'Int'
    name: 'String'
    User: 'User'
  }
  LikedTweet: { // field return type name
    id: 'Int'
    likedAt: 'DateTime'
    tweet: 'Tweet'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createProfile: 'Profile'
    createReply: 'Comment'
    createTweet: 'Tweet'
    deleteFollow: 'Following'
    deleteLike: 'LikedTweet'
    follow: 'Following'
    likeTweet: 'LikedTweet'
    login: 'AuthPayload'
    signup: 'AuthPayload'
    updateProfile: 'Profile'
  }
  Profile: { // field return type name
    avatar: 'String'
    bio: 'String'
    id: 'Int'
    location: 'String'
    website: 'String'
  }
  Query: { // field return type name
    me: 'User'
    tweet: 'Tweet'
    tweets: 'Tweet'
    user: 'User'
    users: 'User'
  }
  Tweet: { // field return type name
    author: 'User'
    comments: 'Comment'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    likes: 'LikedTweet'
  }
  User: { // field return type name
    comments: 'Comment'
    email: 'String'
    Following: 'Following'
    id: 'Int'
    likedTweet: 'LikedTweet'
    name: 'String'
    Profile: 'Profile'
    tweets: 'Tweet'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      content: string; // String!
      id: number; // Int!
    }
    createProfile: { // args
      avatar?: string | null; // String
      bio?: string | null; // String
      location?: string | null; // String
      website?: string | null; // String
    }
    createReply: { // args
      commentId?: number | null; // Int
      content: string; // String!
      id: number; // Int!
    }
    createTweet: { // args
      content?: string | null; // String
    }
    deleteFollow: { // args
      id: number; // Int!
    }
    deleteLike: { // args
      id: number; // Int!
    }
    follow: { // args
      avatar: string; // String!
      followId: number; // Int!
      name: string; // String!
    }
    likeTweet: { // args
      id?: number | null; // Int
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
    updateProfile: { // args
      avatar?: string | null; // String
      bio?: string | null; // String
      id?: number | null; // Int
      location?: string | null; // String
      website?: string | null; // String
    }
  }
  Query: {
    tweet: { // args
      id?: number | null; // Int
    }
    user: { // args
      id?: number | null; // Int
    }
  }
  Tweet: {
    comments: { // args
      after?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      before?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    likes: { // args
      after?: NexusGenInputs['LikedTweetWhereUniqueInput'] | null; // LikedTweetWhereUniqueInput
      before?: NexusGenInputs['LikedTweetWhereUniqueInput'] | null; // LikedTweetWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  User: {
    comments: { // args
      after?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      before?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    Following: { // args
      after?: NexusGenInputs['FollowingWhereUniqueInput'] | null; // FollowingWhereUniqueInput
      before?: NexusGenInputs['FollowingWhereUniqueInput'] | null; // FollowingWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    likedTweet: { // args
      after?: NexusGenInputs['LikedTweetWhereUniqueInput'] | null; // LikedTweetWhereUniqueInput
      before?: NexusGenInputs['LikedTweetWhereUniqueInput'] | null; // LikedTweetWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Comment" | "Following" | "LikedTweet" | "Mutation" | "Profile" | "Query" | "Tweet" | "User";

export type NexusGenInputNames = "CommentWhereUniqueInput" | "FollowingWhereUniqueInput" | "LikedTweetWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}
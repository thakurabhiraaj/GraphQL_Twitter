import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.10.1
 * Query Engine version: 7d0087eadc7265e12d4b8d8c3516b02c4c965111
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  postgresql?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tweets
 * const tweets = await prisma.tweet.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tweets
   * const tweets = await prisma.tweet.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;

  /**
   * `prisma.tweet`: Exposes CRUD operations for the **Tweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweets
    * const tweets = await prisma.tweet.findMany()
    * ```
    */
  get tweet(): TweetDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.likedTweet`: Exposes CRUD operations for the **LikedTweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikedTweets
    * const likedTweets = await prisma.likedTweet.findMany()
    * ```
    */
  get likedTweet(): LikedTweetDelegate;

  /**
   * `prisma.following`: Exposes CRUD operations for the **Following** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followings
    * const followings = await prisma.following.findMany()
    * ```
    */
  get following(): FollowingDelegate;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): ProfileDelegate;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): CommentDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const TweetDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  authorId: 'authorId'
};

export declare type TweetDistinctFieldEnum = (typeof TweetDistinctFieldEnum)[keyof typeof TweetDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const LikedTweetDistinctFieldEnum: {
  id: 'id',
  likedAt: 'likedAt',
  userId: 'userId',
  tweetId: 'tweetId'
};

export declare type LikedTweetDistinctFieldEnum = (typeof LikedTweetDistinctFieldEnum)[keyof typeof LikedTweetDistinctFieldEnum]


export declare const FollowingDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  avatar: 'avatar',
  followId: 'followId',
  userId: 'userId'
};

export declare type FollowingDistinctFieldEnum = (typeof FollowingDistinctFieldEnum)[keyof typeof FollowingDistinctFieldEnum]


export declare const ProfileDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  bio: 'bio',
  location: 'location',
  website: 'website',
  avatar: 'avatar',
  userId: 'userId'
};

export declare type ProfileDistinctFieldEnum = (typeof ProfileDistinctFieldEnum)[keyof typeof ProfileDistinctFieldEnum]


export declare const CommentDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  tweetId: 'tweetId',
  userId: 'userId',
  commentId: 'commentId'
};

export declare type CommentDistinctFieldEnum = (typeof CommentDistinctFieldEnum)[keyof typeof CommentDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model Tweet
 */

export type Tweet = {
  id: number
  createdAt: Date
  content: string | null
  authorId: number | null
}


export type AggregateTweet = {
  count: number
  avg: TweetAvgAggregateOutputType | null
  sum: TweetSumAggregateOutputType | null
  min: TweetMinAggregateOutputType | null
  max: TweetMaxAggregateOutputType | null
}

export type TweetAvgAggregateOutputType = {
  id: number
  authorId: number | null
}

export type TweetSumAggregateOutputType = {
  id: number
  authorId: number | null
}

export type TweetMinAggregateOutputType = {
  id: number
  authorId: number | null
}

export type TweetMaxAggregateOutputType = {
  id: number
  authorId: number | null
}


export type TweetAvgAggregateInputType = {
  id?: true
  authorId?: true
}

export type TweetSumAggregateInputType = {
  id?: true
  authorId?: true
}

export type TweetMinAggregateInputType = {
  id?: true
  authorId?: true
}

export type TweetMaxAggregateInputType = {
  id?: true
  authorId?: true
}

export type AggregateTweetArgs = {
  where?: TweetWhereInput
  orderBy?: Enumerable<TweetOrderByInput> | TweetOrderByInput
  cursor?: TweetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TweetDistinctFieldEnum>
  count?: true
  avg?: TweetAvgAggregateInputType
  sum?: TweetSumAggregateInputType
  min?: TweetMinAggregateInputType
  max?: TweetMaxAggregateInputType
}

export type GetTweetAggregateType<T extends AggregateTweetArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTweetAggregateScalarType<T[P]>
}

export type GetTweetAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TweetAvgAggregateOutputType ? TweetAvgAggregateOutputType[P] : never
}
    
    

export type TweetSelect = {
  id?: boolean
  createdAt?: boolean
  content?: boolean
  likes?: boolean | FindManyLikedTweetArgs
  author?: boolean | UserArgs
  authorId?: boolean
  comments?: boolean | FindManyCommentArgs
}

export type TweetInclude = {
  likes?: boolean | FindManyLikedTweetArgs
  author?: boolean | UserArgs
  comments?: boolean | FindManyCommentArgs
}

export type TweetGetPayload<
  S extends boolean | null | undefined | TweetArgs,
  U = keyof S
> = S extends true
  ? Tweet
  : S extends undefined
  ? never
  : S extends TweetArgs | FindManyTweetArgs
  ? 'include' extends U
    ? Tweet  & {
      [P in TrueKeys<S['include']>]:
      P extends 'likes'
      ? Array<LikedTweetGetPayload<S['include'][P]>> :
      P extends 'author'
      ? UserGetPayload<S['include'][P]> | null :
      P extends 'comments'
      ? Array<CommentGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Tweet ? Tweet[P]
: 
      P extends 'likes'
      ? Array<LikedTweetGetPayload<S['select'][P]>> :
      P extends 'author'
      ? UserGetPayload<S['select'][P]> | null :
      P extends 'comments'
      ? Array<CommentGetPayload<S['select'][P]>> : never
    }
  : Tweet
: Tweet


export interface TweetDelegate {
  /**
   * Find zero or one Tweet that matches the filter.
   * @param {FindOneTweetArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTweetArgs>(
    args: Subset<T, FindOneTweetArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet | null>, Prisma__TweetClient<TweetGetPayload<T> | null>>
  /**
   * Find the first Tweet that matches the filter.
   * @param {FindFirstTweetArgs} args - Arguments to find a Tweet
   * @example
   * // Get one Tweet
   * const tweet = await prisma.tweet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTweetArgs>(
    args?: Subset<T, FindFirstTweetArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet | null>, Prisma__TweetClient<TweetGetPayload<T> | null>>
  /**
   * Find zero or more Tweets that matches the filter.
   * @param {FindManyTweetArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tweets
   * const tweets = await prisma.tweet.findMany()
   * 
   * // Get first 10 Tweets
   * const tweets = await prisma.tweet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tweetWithIdOnly = await prisma.tweet.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyTweetArgs>(
    args?: Subset<T, FindManyTweetArgs>
  ): CheckSelect<T, Promise<Array<Tweet>>, Promise<Array<TweetGetPayload<T>>>>
  /**
   * Create a Tweet.
   * @param {TweetCreateArgs} args - Arguments to create a Tweet.
   * @example
   * // Create one Tweet
   * const Tweet = await prisma.tweet.create({
   *   data: {
   *     // ... data to create a Tweet
   *   }
   * })
   * 
  **/
  create<T extends TweetCreateArgs>(
    args: Subset<T, TweetCreateArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>
  /**
   * Delete a Tweet.
   * @param {TweetDeleteArgs} args - Arguments to delete one Tweet.
   * @example
   * // Delete one Tweet
   * const Tweet = await prisma.tweet.delete({
   *   where: {
   *     // ... filter to delete one Tweet
   *   }
   * })
   * 
  **/
  delete<T extends TweetDeleteArgs>(
    args: Subset<T, TweetDeleteArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>
  /**
   * Update one Tweet.
   * @param {TweetUpdateArgs} args - Arguments to update one Tweet.
   * @example
   * // Update one Tweet
   * const tweet = await prisma.tweet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TweetUpdateArgs>(
    args: Subset<T, TweetUpdateArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>
  /**
   * Delete zero or more Tweets.
   * @param {TweetDeleteManyArgs} args - Arguments to filter Tweets to delete.
   * @example
   * // Delete a few Tweets
   * const { count } = await prisma.tweet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TweetDeleteManyArgs>(
    args: Subset<T, TweetDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Tweets.
   * @param {TweetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tweets
   * const tweet = await prisma.tweet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TweetUpdateManyArgs>(
    args: Subset<T, TweetUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Tweet.
   * @param {TweetUpsertArgs} args - Arguments to update or create a Tweet.
   * @example
   * // Update or create a Tweet
   * const tweet = await prisma.tweet.upsert({
   *   create: {
   *     // ... data to create a Tweet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tweet we want to update
   *   }
   * })
  **/
  upsert<T extends TweetUpsertArgs>(
    args: Subset<T, TweetUpsertArgs>
  ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTweetArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTweetArgs>(args: Subset<T, AggregateTweetArgs>): Promise<GetTweetAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Tweet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TweetClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  likes<T extends FindManyLikedTweetArgs = {}>(args?: Subset<T, FindManyLikedTweetArgs>): CheckSelect<T, Promise<Array<LikedTweet>>, Promise<Array<LikedTweetGetPayload<T>>>>;

  author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Tweet findOne
 */
export type FindOneTweetArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * Filter, which Tweet to fetch.
  **/
  where: TweetWhereUniqueInput
}


/**
 * Tweet findFirst
 */
export type FindFirstTweetArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * Filter, which Tweet to fetch.
  **/
  where?: TweetWhereInput
  orderBy?: Enumerable<TweetOrderByInput> | TweetOrderByInput
  cursor?: TweetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TweetDistinctFieldEnum>
}


/**
 * Tweet findMany
 */
export type FindManyTweetArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * Filter, which Tweets to fetch.
  **/
  where?: TweetWhereInput
  /**
   * Determine the order of the Tweets to fetch.
  **/
  orderBy?: Enumerable<TweetOrderByInput> | TweetOrderByInput
  /**
   * Sets the position for listing Tweets.
  **/
  cursor?: TweetWhereUniqueInput
  /**
   * The number of Tweets to fetch. If negative number, it will take Tweets before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Tweets.
  **/
  skip?: number
  distinct?: Enumerable<TweetDistinctFieldEnum>
}


/**
 * Tweet create
 */
export type TweetCreateArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * The data needed to create a Tweet.
  **/
  data: TweetCreateInput
}


/**
 * Tweet update
 */
export type TweetUpdateArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * The data needed to update a Tweet.
  **/
  data: TweetUpdateInput
  /**
   * Choose, which Tweet to update.
  **/
  where: TweetWhereUniqueInput
}


/**
 * Tweet updateMany
 */
export type TweetUpdateManyArgs = {
  data: TweetUpdateManyMutationInput
  where?: TweetWhereInput
}


/**
 * Tweet upsert
 */
export type TweetUpsertArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * The filter to search for the Tweet to update in case it exists.
  **/
  where: TweetWhereUniqueInput
  /**
   * In case the Tweet found by the `where` argument doesn't exist, create a new Tweet with this data.
  **/
  create: TweetCreateInput
  /**
   * In case the Tweet was found with the provided `where` argument, update it with this data.
  **/
  update: TweetUpdateInput
}


/**
 * Tweet delete
 */
export type TweetDeleteArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
  /**
   * Filter which Tweet to delete.
  **/
  where: TweetWhereUniqueInput
}


/**
 * Tweet deleteMany
 */
export type TweetDeleteManyArgs = {
  where?: TweetWhereInput
}


/**
 * Tweet without action
 */
export type TweetArgs = {
  /**
   * Select specific fields to fetch from the Tweet
  **/
  select?: TweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: TweetInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  email: string
  password: string
  name: string | null
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  tweets?: boolean | FindManyTweetArgs
  Profile?: boolean | ProfileArgs
  likedTweet?: boolean | FindManyLikedTweetArgs
  comments?: boolean | FindManyCommentArgs
  Following?: boolean | FindManyFollowingArgs
}

export type UserInclude = {
  tweets?: boolean | FindManyTweetArgs
  Profile?: boolean | ProfileArgs
  likedTweet?: boolean | FindManyLikedTweetArgs
  comments?: boolean | FindManyCommentArgs
  Following?: boolean | FindManyFollowingArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'tweets'
      ? Array<TweetGetPayload<S['include'][P]>> :
      P extends 'Profile'
      ? ProfileGetPayload<S['include'][P]> | null :
      P extends 'likedTweet'
      ? Array<LikedTweetGetPayload<S['include'][P]>> :
      P extends 'comments'
      ? Array<CommentGetPayload<S['include'][P]>> :
      P extends 'Following'
      ? Array<FollowingGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'tweets'
      ? Array<TweetGetPayload<S['select'][P]>> :
      P extends 'Profile'
      ? ProfileGetPayload<S['select'][P]> | null :
      P extends 'likedTweet'
      ? Array<LikedTweetGetPayload<S['select'][P]>> :
      P extends 'comments'
      ? Array<CommentGetPayload<S['select'][P]>> :
      P extends 'Following'
      ? Array<FollowingGetPayload<S['select'][P]>> : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User that matches the filter.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find the first User that matches the filter.
   * @param {FindFirstUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstUserArgs>(
    args?: Subset<T, FindFirstUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users that matches the filter.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  tweets<T extends FindManyTweetArgs = {}>(args?: Subset<T, FindManyTweetArgs>): CheckSelect<T, Promise<Array<Tweet>>, Promise<Array<TweetGetPayload<T>>>>;

  Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>;

  likedTweet<T extends FindManyLikedTweetArgs = {}>(args?: Subset<T, FindManyLikedTweetArgs>): CheckSelect<T, Promise<Array<LikedTweet>>, Promise<Array<LikedTweetGetPayload<T>>>>;

  comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

  Following<T extends FindManyFollowingArgs = {}>(args?: Subset<T, FindManyFollowingArgs>): CheckSelect<T, Promise<Array<Following>>, Promise<Array<FollowingGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findFirst
 */
export type FindFirstUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput> | UserOrderByInput
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Model LikedTweet
 */

export type LikedTweet = {
  id: number
  likedAt: Date
  userId: number | null
  tweetId: number
}


export type AggregateLikedTweet = {
  count: number
  avg: LikedTweetAvgAggregateOutputType | null
  sum: LikedTweetSumAggregateOutputType | null
  min: LikedTweetMinAggregateOutputType | null
  max: LikedTweetMaxAggregateOutputType | null
}

export type LikedTweetAvgAggregateOutputType = {
  id: number
  userId: number | null
  tweetId: number
}

export type LikedTweetSumAggregateOutputType = {
  id: number
  userId: number | null
  tweetId: number
}

export type LikedTweetMinAggregateOutputType = {
  id: number
  userId: number | null
  tweetId: number
}

export type LikedTweetMaxAggregateOutputType = {
  id: number
  userId: number | null
  tweetId: number
}


export type LikedTweetAvgAggregateInputType = {
  id?: true
  userId?: true
  tweetId?: true
}

export type LikedTweetSumAggregateInputType = {
  id?: true
  userId?: true
  tweetId?: true
}

export type LikedTweetMinAggregateInputType = {
  id?: true
  userId?: true
  tweetId?: true
}

export type LikedTweetMaxAggregateInputType = {
  id?: true
  userId?: true
  tweetId?: true
}

export type AggregateLikedTweetArgs = {
  where?: LikedTweetWhereInput
  orderBy?: Enumerable<LikedTweetOrderByInput> | LikedTweetOrderByInput
  cursor?: LikedTweetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LikedTweetDistinctFieldEnum>
  count?: true
  avg?: LikedTweetAvgAggregateInputType
  sum?: LikedTweetSumAggregateInputType
  min?: LikedTweetMinAggregateInputType
  max?: LikedTweetMaxAggregateInputType
}

export type GetLikedTweetAggregateType<T extends AggregateLikedTweetArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetLikedTweetAggregateScalarType<T[P]>
}

export type GetLikedTweetAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof LikedTweetAvgAggregateOutputType ? LikedTweetAvgAggregateOutputType[P] : never
}
    
    

export type LikedTweetSelect = {
  id?: boolean
  tweet?: boolean | TweetArgs
  likedAt?: boolean
  userId?: boolean
  User?: boolean | UserArgs
  tweetId?: boolean
}

export type LikedTweetInclude = {
  tweet?: boolean | TweetArgs
  User?: boolean | UserArgs
}

export type LikedTweetGetPayload<
  S extends boolean | null | undefined | LikedTweetArgs,
  U = keyof S
> = S extends true
  ? LikedTweet
  : S extends undefined
  ? never
  : S extends LikedTweetArgs | FindManyLikedTweetArgs
  ? 'include' extends U
    ? LikedTweet  & {
      [P in TrueKeys<S['include']>]:
      P extends 'tweet'
      ? TweetGetPayload<S['include'][P]> :
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof LikedTweet ? LikedTweet[P]
: 
      P extends 'tweet'
      ? TweetGetPayload<S['select'][P]> :
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : LikedTweet
: LikedTweet


export interface LikedTweetDelegate {
  /**
   * Find zero or one LikedTweet that matches the filter.
   * @param {FindOneLikedTweetArgs} args - Arguments to find a LikedTweet
   * @example
   * // Get one LikedTweet
   * const likedTweet = await prisma.likedTweet.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLikedTweetArgs>(
    args: Subset<T, FindOneLikedTweetArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet | null>, Prisma__LikedTweetClient<LikedTweetGetPayload<T> | null>>
  /**
   * Find the first LikedTweet that matches the filter.
   * @param {FindFirstLikedTweetArgs} args - Arguments to find a LikedTweet
   * @example
   * // Get one LikedTweet
   * const likedTweet = await prisma.likedTweet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstLikedTweetArgs>(
    args?: Subset<T, FindFirstLikedTweetArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet | null>, Prisma__LikedTweetClient<LikedTweetGetPayload<T> | null>>
  /**
   * Find zero or more LikedTweets that matches the filter.
   * @param {FindManyLikedTweetArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LikedTweets
   * const likedTweets = await prisma.likedTweet.findMany()
   * 
   * // Get first 10 LikedTweets
   * const likedTweets = await prisma.likedTweet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const likedTweetWithIdOnly = await prisma.likedTweet.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyLikedTweetArgs>(
    args?: Subset<T, FindManyLikedTweetArgs>
  ): CheckSelect<T, Promise<Array<LikedTweet>>, Promise<Array<LikedTweetGetPayload<T>>>>
  /**
   * Create a LikedTweet.
   * @param {LikedTweetCreateArgs} args - Arguments to create a LikedTweet.
   * @example
   * // Create one LikedTweet
   * const LikedTweet = await prisma.likedTweet.create({
   *   data: {
   *     // ... data to create a LikedTweet
   *   }
   * })
   * 
  **/
  create<T extends LikedTweetCreateArgs>(
    args: Subset<T, LikedTweetCreateArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet>, Prisma__LikedTweetClient<LikedTweetGetPayload<T>>>
  /**
   * Delete a LikedTweet.
   * @param {LikedTweetDeleteArgs} args - Arguments to delete one LikedTweet.
   * @example
   * // Delete one LikedTweet
   * const LikedTweet = await prisma.likedTweet.delete({
   *   where: {
   *     // ... filter to delete one LikedTweet
   *   }
   * })
   * 
  **/
  delete<T extends LikedTweetDeleteArgs>(
    args: Subset<T, LikedTweetDeleteArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet>, Prisma__LikedTweetClient<LikedTweetGetPayload<T>>>
  /**
   * Update one LikedTweet.
   * @param {LikedTweetUpdateArgs} args - Arguments to update one LikedTweet.
   * @example
   * // Update one LikedTweet
   * const likedTweet = await prisma.likedTweet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LikedTweetUpdateArgs>(
    args: Subset<T, LikedTweetUpdateArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet>, Prisma__LikedTweetClient<LikedTweetGetPayload<T>>>
  /**
   * Delete zero or more LikedTweets.
   * @param {LikedTweetDeleteManyArgs} args - Arguments to filter LikedTweets to delete.
   * @example
   * // Delete a few LikedTweets
   * const { count } = await prisma.likedTweet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LikedTweetDeleteManyArgs>(
    args: Subset<T, LikedTweetDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more LikedTweets.
   * @param {LikedTweetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LikedTweets
   * const likedTweet = await prisma.likedTweet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LikedTweetUpdateManyArgs>(
    args: Subset<T, LikedTweetUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one LikedTweet.
   * @param {LikedTweetUpsertArgs} args - Arguments to update or create a LikedTweet.
   * @example
   * // Update or create a LikedTweet
   * const likedTweet = await prisma.likedTweet.upsert({
   *   create: {
   *     // ... data to create a LikedTweet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LikedTweet we want to update
   *   }
   * })
  **/
  upsert<T extends LikedTweetUpsertArgs>(
    args: Subset<T, LikedTweetUpsertArgs>
  ): CheckSelect<T, Prisma__LikedTweetClient<LikedTweet>, Prisma__LikedTweetClient<LikedTweetGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyLikedTweetArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateLikedTweetArgs>(args: Subset<T, AggregateLikedTweetArgs>): Promise<GetLikedTweetAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for LikedTweet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__LikedTweetClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  tweet<T extends TweetArgs = {}>(args?: Subset<T, TweetArgs>): CheckSelect<T, Prisma__TweetClient<Tweet | null>, Prisma__TweetClient<TweetGetPayload<T> | null>>;

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * LikedTweet findOne
 */
export type FindOneLikedTweetArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * Filter, which LikedTweet to fetch.
  **/
  where: LikedTweetWhereUniqueInput
}


/**
 * LikedTweet findFirst
 */
export type FindFirstLikedTweetArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * Filter, which LikedTweet to fetch.
  **/
  where?: LikedTweetWhereInput
  orderBy?: Enumerable<LikedTweetOrderByInput> | LikedTweetOrderByInput
  cursor?: LikedTweetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LikedTweetDistinctFieldEnum>
}


/**
 * LikedTweet findMany
 */
export type FindManyLikedTweetArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * Filter, which LikedTweets to fetch.
  **/
  where?: LikedTweetWhereInput
  /**
   * Determine the order of the LikedTweets to fetch.
  **/
  orderBy?: Enumerable<LikedTweetOrderByInput> | LikedTweetOrderByInput
  /**
   * Sets the position for listing LikedTweets.
  **/
  cursor?: LikedTweetWhereUniqueInput
  /**
   * The number of LikedTweets to fetch. If negative number, it will take LikedTweets before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` LikedTweets.
  **/
  skip?: number
  distinct?: Enumerable<LikedTweetDistinctFieldEnum>
}


/**
 * LikedTweet create
 */
export type LikedTweetCreateArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * The data needed to create a LikedTweet.
  **/
  data: LikedTweetCreateInput
}


/**
 * LikedTweet update
 */
export type LikedTweetUpdateArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * The data needed to update a LikedTweet.
  **/
  data: LikedTweetUpdateInput
  /**
   * Choose, which LikedTweet to update.
  **/
  where: LikedTweetWhereUniqueInput
}


/**
 * LikedTweet updateMany
 */
export type LikedTweetUpdateManyArgs = {
  data: LikedTweetUpdateManyMutationInput
  where?: LikedTweetWhereInput
}


/**
 * LikedTweet upsert
 */
export type LikedTweetUpsertArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * The filter to search for the LikedTweet to update in case it exists.
  **/
  where: LikedTweetWhereUniqueInput
  /**
   * In case the LikedTweet found by the `where` argument doesn't exist, create a new LikedTweet with this data.
  **/
  create: LikedTweetCreateInput
  /**
   * In case the LikedTweet was found with the provided `where` argument, update it with this data.
  **/
  update: LikedTweetUpdateInput
}


/**
 * LikedTweet delete
 */
export type LikedTweetDeleteArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
  /**
   * Filter which LikedTweet to delete.
  **/
  where: LikedTweetWhereUniqueInput
}


/**
 * LikedTweet deleteMany
 */
export type LikedTweetDeleteManyArgs = {
  where?: LikedTweetWhereInput
}


/**
 * LikedTweet without action
 */
export type LikedTweetArgs = {
  /**
   * Select specific fields to fetch from the LikedTweet
  **/
  select?: LikedTweetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LikedTweetInclude | null
}



/**
 * Model Following
 */

export type Following = {
  id: number
  name: string
  avatar: string
  followId: number
  userId: number | null
}


export type AggregateFollowing = {
  count: number
  avg: FollowingAvgAggregateOutputType | null
  sum: FollowingSumAggregateOutputType | null
  min: FollowingMinAggregateOutputType | null
  max: FollowingMaxAggregateOutputType | null
}

export type FollowingAvgAggregateOutputType = {
  id: number
  followId: number
  userId: number | null
}

export type FollowingSumAggregateOutputType = {
  id: number
  followId: number
  userId: number | null
}

export type FollowingMinAggregateOutputType = {
  id: number
  followId: number
  userId: number | null
}

export type FollowingMaxAggregateOutputType = {
  id: number
  followId: number
  userId: number | null
}


export type FollowingAvgAggregateInputType = {
  id?: true
  followId?: true
  userId?: true
}

export type FollowingSumAggregateInputType = {
  id?: true
  followId?: true
  userId?: true
}

export type FollowingMinAggregateInputType = {
  id?: true
  followId?: true
  userId?: true
}

export type FollowingMaxAggregateInputType = {
  id?: true
  followId?: true
  userId?: true
}

export type AggregateFollowingArgs = {
  where?: FollowingWhereInput
  orderBy?: Enumerable<FollowingOrderByInput> | FollowingOrderByInput
  cursor?: FollowingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<FollowingDistinctFieldEnum>
  count?: true
  avg?: FollowingAvgAggregateInputType
  sum?: FollowingSumAggregateInputType
  min?: FollowingMinAggregateInputType
  max?: FollowingMaxAggregateInputType
}

export type GetFollowingAggregateType<T extends AggregateFollowingArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetFollowingAggregateScalarType<T[P]>
}

export type GetFollowingAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof FollowingAvgAggregateOutputType ? FollowingAvgAggregateOutputType[P] : never
}
    
    

export type FollowingSelect = {
  id?: boolean
  name?: boolean
  avatar?: boolean
  followId?: boolean
  User?: boolean | UserArgs
  userId?: boolean
}

export type FollowingInclude = {
  User?: boolean | UserArgs
}

export type FollowingGetPayload<
  S extends boolean | null | undefined | FollowingArgs,
  U = keyof S
> = S extends true
  ? Following
  : S extends undefined
  ? never
  : S extends FollowingArgs | FindManyFollowingArgs
  ? 'include' extends U
    ? Following  & {
      [P in TrueKeys<S['include']>]:
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Following ? Following[P]
: 
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : Following
: Following


export interface FollowingDelegate {
  /**
   * Find zero or one Following that matches the filter.
   * @param {FindOneFollowingArgs} args - Arguments to find a Following
   * @example
   * // Get one Following
   * const following = await prisma.following.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneFollowingArgs>(
    args: Subset<T, FindOneFollowingArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following | null>, Prisma__FollowingClient<FollowingGetPayload<T> | null>>
  /**
   * Find the first Following that matches the filter.
   * @param {FindFirstFollowingArgs} args - Arguments to find a Following
   * @example
   * // Get one Following
   * const following = await prisma.following.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstFollowingArgs>(
    args?: Subset<T, FindFirstFollowingArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following | null>, Prisma__FollowingClient<FollowingGetPayload<T> | null>>
  /**
   * Find zero or more Followings that matches the filter.
   * @param {FindManyFollowingArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Followings
   * const followings = await prisma.following.findMany()
   * 
   * // Get first 10 Followings
   * const followings = await prisma.following.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const followingWithIdOnly = await prisma.following.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyFollowingArgs>(
    args?: Subset<T, FindManyFollowingArgs>
  ): CheckSelect<T, Promise<Array<Following>>, Promise<Array<FollowingGetPayload<T>>>>
  /**
   * Create a Following.
   * @param {FollowingCreateArgs} args - Arguments to create a Following.
   * @example
   * // Create one Following
   * const Following = await prisma.following.create({
   *   data: {
   *     // ... data to create a Following
   *   }
   * })
   * 
  **/
  create<T extends FollowingCreateArgs>(
    args: Subset<T, FollowingCreateArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following>, Prisma__FollowingClient<FollowingGetPayload<T>>>
  /**
   * Delete a Following.
   * @param {FollowingDeleteArgs} args - Arguments to delete one Following.
   * @example
   * // Delete one Following
   * const Following = await prisma.following.delete({
   *   where: {
   *     // ... filter to delete one Following
   *   }
   * })
   * 
  **/
  delete<T extends FollowingDeleteArgs>(
    args: Subset<T, FollowingDeleteArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following>, Prisma__FollowingClient<FollowingGetPayload<T>>>
  /**
   * Update one Following.
   * @param {FollowingUpdateArgs} args - Arguments to update one Following.
   * @example
   * // Update one Following
   * const following = await prisma.following.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends FollowingUpdateArgs>(
    args: Subset<T, FollowingUpdateArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following>, Prisma__FollowingClient<FollowingGetPayload<T>>>
  /**
   * Delete zero or more Followings.
   * @param {FollowingDeleteManyArgs} args - Arguments to filter Followings to delete.
   * @example
   * // Delete a few Followings
   * const { count } = await prisma.following.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends FollowingDeleteManyArgs>(
    args: Subset<T, FollowingDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Followings.
   * @param {FollowingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Followings
   * const following = await prisma.following.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends FollowingUpdateManyArgs>(
    args: Subset<T, FollowingUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Following.
   * @param {FollowingUpsertArgs} args - Arguments to update or create a Following.
   * @example
   * // Update or create a Following
   * const following = await prisma.following.upsert({
   *   create: {
   *     // ... data to create a Following
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Following we want to update
   *   }
   * })
  **/
  upsert<T extends FollowingUpsertArgs>(
    args: Subset<T, FollowingUpsertArgs>
  ): CheckSelect<T, Prisma__FollowingClient<Following>, Prisma__FollowingClient<FollowingGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyFollowingArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateFollowingArgs>(args: Subset<T, AggregateFollowingArgs>): Promise<GetFollowingAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Following.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__FollowingClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Following findOne
 */
export type FindOneFollowingArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * Filter, which Following to fetch.
  **/
  where: FollowingWhereUniqueInput
}


/**
 * Following findFirst
 */
export type FindFirstFollowingArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * Filter, which Following to fetch.
  **/
  where?: FollowingWhereInput
  orderBy?: Enumerable<FollowingOrderByInput> | FollowingOrderByInput
  cursor?: FollowingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<FollowingDistinctFieldEnum>
}


/**
 * Following findMany
 */
export type FindManyFollowingArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * Filter, which Followings to fetch.
  **/
  where?: FollowingWhereInput
  /**
   * Determine the order of the Followings to fetch.
  **/
  orderBy?: Enumerable<FollowingOrderByInput> | FollowingOrderByInput
  /**
   * Sets the position for listing Followings.
  **/
  cursor?: FollowingWhereUniqueInput
  /**
   * The number of Followings to fetch. If negative number, it will take Followings before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Followings.
  **/
  skip?: number
  distinct?: Enumerable<FollowingDistinctFieldEnum>
}


/**
 * Following create
 */
export type FollowingCreateArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * The data needed to create a Following.
  **/
  data: FollowingCreateInput
}


/**
 * Following update
 */
export type FollowingUpdateArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * The data needed to update a Following.
  **/
  data: FollowingUpdateInput
  /**
   * Choose, which Following to update.
  **/
  where: FollowingWhereUniqueInput
}


/**
 * Following updateMany
 */
export type FollowingUpdateManyArgs = {
  data: FollowingUpdateManyMutationInput
  where?: FollowingWhereInput
}


/**
 * Following upsert
 */
export type FollowingUpsertArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * The filter to search for the Following to update in case it exists.
  **/
  where: FollowingWhereUniqueInput
  /**
   * In case the Following found by the `where` argument doesn't exist, create a new Following with this data.
  **/
  create: FollowingCreateInput
  /**
   * In case the Following was found with the provided `where` argument, update it with this data.
  **/
  update: FollowingUpdateInput
}


/**
 * Following delete
 */
export type FollowingDeleteArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
  /**
   * Filter which Following to delete.
  **/
  where: FollowingWhereUniqueInput
}


/**
 * Following deleteMany
 */
export type FollowingDeleteManyArgs = {
  where?: FollowingWhereInput
}


/**
 * Following without action
 */
export type FollowingArgs = {
  /**
   * Select specific fields to fetch from the Following
  **/
  select?: FollowingSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: FollowingInclude | null
}



/**
 * Model Profile
 */

export type Profile = {
  id: number
  createdAt: Date
  bio: string | null
  location: string | null
  website: string | null
  avatar: string | null
  userId: number | null
}


export type AggregateProfile = {
  count: number
  avg: ProfileAvgAggregateOutputType | null
  sum: ProfileSumAggregateOutputType | null
  min: ProfileMinAggregateOutputType | null
  max: ProfileMaxAggregateOutputType | null
}

export type ProfileAvgAggregateOutputType = {
  id: number
  userId: number | null
}

export type ProfileSumAggregateOutputType = {
  id: number
  userId: number | null
}

export type ProfileMinAggregateOutputType = {
  id: number
  userId: number | null
}

export type ProfileMaxAggregateOutputType = {
  id: number
  userId: number | null
}


export type ProfileAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileSumAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMinAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateProfileArgs = {
  where?: ProfileWhereInput
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  cursor?: ProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
  count?: true
  avg?: ProfileAvgAggregateInputType
  sum?: ProfileSumAggregateInputType
  min?: ProfileMinAggregateInputType
  max?: ProfileMaxAggregateInputType
}

export type GetProfileAggregateType<T extends AggregateProfileArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProfileAggregateScalarType<T[P]>
}

export type GetProfileAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProfileAvgAggregateOutputType ? ProfileAvgAggregateOutputType[P] : never
}
    
    

export type ProfileSelect = {
  id?: boolean
  createdAt?: boolean
  bio?: boolean
  location?: boolean
  website?: boolean
  avatar?: boolean
  userId?: boolean
  User?: boolean | UserArgs
}

export type ProfileInclude = {
  User?: boolean | UserArgs
}

export type ProfileGetPayload<
  S extends boolean | null | undefined | ProfileArgs,
  U = keyof S
> = S extends true
  ? Profile
  : S extends undefined
  ? never
  : S extends ProfileArgs | FindManyProfileArgs
  ? 'include' extends U
    ? Profile  & {
      [P in TrueKeys<S['include']>]:
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Profile ? Profile[P]
: 
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null : never
    }
  : Profile
: Profile


export interface ProfileDelegate {
  /**
   * Find zero or one Profile that matches the filter.
   * @param {FindOneProfileArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProfileArgs>(
    args: Subset<T, FindOneProfileArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
  /**
   * Find the first Profile that matches the filter.
   * @param {FindFirstProfileArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProfileArgs>(
    args?: Subset<T, FindFirstProfileArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
  /**
   * Find zero or more Profiles that matches the filter.
   * @param {FindManyProfileArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profiles
   * const profiles = await prisma.profile.findMany()
   * 
   * // Get first 10 Profiles
   * const profiles = await prisma.profile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProfileArgs>(
    args?: Subset<T, FindManyProfileArgs>
  ): CheckSelect<T, Promise<Array<Profile>>, Promise<Array<ProfileGetPayload<T>>>>
  /**
   * Create a Profile.
   * @param {ProfileCreateArgs} args - Arguments to create a Profile.
   * @example
   * // Create one Profile
   * const Profile = await prisma.profile.create({
   *   data: {
   *     // ... data to create a Profile
   *   }
   * })
   * 
  **/
  create<T extends ProfileCreateArgs>(
    args: Subset<T, ProfileCreateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete a Profile.
   * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
   * @example
   * // Delete one Profile
   * const Profile = await prisma.profile.delete({
   *   where: {
   *     // ... filter to delete one Profile
   *   }
   * })
   * 
  **/
  delete<T extends ProfileDeleteArgs>(
    args: Subset<T, ProfileDeleteArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Update one Profile.
   * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
   * @example
   * // Update one Profile
   * const profile = await prisma.profile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProfileUpdateArgs>(
    args: Subset<T, ProfileUpdateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete zero or more Profiles.
   * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
   * @example
   * // Delete a few Profiles
   * const { count } = await prisma.profile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProfileDeleteManyArgs>(
    args: Subset<T, ProfileDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Profiles.
   * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProfileUpdateManyArgs>(
    args: Subset<T, ProfileUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Profile.
   * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
   * @example
   * // Update or create a Profile
   * const profile = await prisma.profile.upsert({
   *   create: {
   *     // ... data to create a Profile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profile we want to update
   *   }
   * })
  **/
  upsert<T extends ProfileUpsertArgs>(
    args: Subset<T, ProfileUpsertArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProfileArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProfileArgs>(args: Subset<T, AggregateProfileArgs>): Promise<GetProfileAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Profile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProfileClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Profile findOne
 */
export type FindOneProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profile to fetch.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile findFirst
 */
export type FindFirstProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profile to fetch.
  **/
  where?: ProfileWhereInput
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  cursor?: ProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
}


/**
 * Profile findMany
 */
export type FindManyProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profiles to fetch.
  **/
  where?: ProfileWhereInput
  /**
   * Determine the order of the Profiles to fetch.
  **/
  orderBy?: Enumerable<ProfileOrderByInput> | ProfileOrderByInput
  /**
   * Sets the position for listing Profiles.
  **/
  cursor?: ProfileWhereUniqueInput
  /**
   * The number of Profiles to fetch. If negative number, it will take Profiles before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Profiles.
  **/
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
}


/**
 * Profile create
 */
export type ProfileCreateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to create a Profile.
  **/
  data: ProfileCreateInput
}


/**
 * Profile update
 */
export type ProfileUpdateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to update a Profile.
  **/
  data: ProfileUpdateInput
  /**
   * Choose, which Profile to update.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile updateMany
 */
export type ProfileUpdateManyArgs = {
  data: ProfileUpdateManyMutationInput
  where?: ProfileWhereInput
}


/**
 * Profile upsert
 */
export type ProfileUpsertArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The filter to search for the Profile to update in case it exists.
  **/
  where: ProfileWhereUniqueInput
  /**
   * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
  **/
  create: ProfileCreateInput
  /**
   * In case the Profile was found with the provided `where` argument, update it with this data.
  **/
  update: ProfileUpdateInput
}


/**
 * Profile delete
 */
export type ProfileDeleteArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter which Profile to delete.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile deleteMany
 */
export type ProfileDeleteManyArgs = {
  where?: ProfileWhereInput
}


/**
 * Profile without action
 */
export type ProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
}



/**
 * Model Comment
 */

export type Comment = {
  id: number
  createdAt: Date
  content: string | null
  tweetId: number | null
  userId: number | null
  commentId: number | null
}


export type AggregateComment = {
  count: number
  avg: CommentAvgAggregateOutputType | null
  sum: CommentSumAggregateOutputType | null
  min: CommentMinAggregateOutputType | null
  max: CommentMaxAggregateOutputType | null
}

export type CommentAvgAggregateOutputType = {
  id: number
  tweetId: number | null
  userId: number | null
  commentId: number | null
}

export type CommentSumAggregateOutputType = {
  id: number
  tweetId: number | null
  userId: number | null
  commentId: number | null
}

export type CommentMinAggregateOutputType = {
  id: number
  tweetId: number | null
  userId: number | null
  commentId: number | null
}

export type CommentMaxAggregateOutputType = {
  id: number
  tweetId: number | null
  userId: number | null
  commentId: number | null
}


export type CommentAvgAggregateInputType = {
  id?: true
  tweetId?: true
  userId?: true
  commentId?: true
}

export type CommentSumAggregateInputType = {
  id?: true
  tweetId?: true
  userId?: true
  commentId?: true
}

export type CommentMinAggregateInputType = {
  id?: true
  tweetId?: true
  userId?: true
  commentId?: true
}

export type CommentMaxAggregateInputType = {
  id?: true
  tweetId?: true
  userId?: true
  commentId?: true
}

export type AggregateCommentArgs = {
  where?: CommentWhereInput
  orderBy?: Enumerable<CommentOrderByInput> | CommentOrderByInput
  cursor?: CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CommentDistinctFieldEnum>
  count?: true
  avg?: CommentAvgAggregateInputType
  sum?: CommentSumAggregateInputType
  min?: CommentMinAggregateInputType
  max?: CommentMaxAggregateInputType
}

export type GetCommentAggregateType<T extends AggregateCommentArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetCommentAggregateScalarType<T[P]>
}

export type GetCommentAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof CommentAvgAggregateOutputType ? CommentAvgAggregateOutputType[P] : never
}
    
    

export type CommentSelect = {
  id?: boolean
  createdAt?: boolean
  content?: boolean
  Tweet?: boolean | TweetArgs
  tweetId?: boolean
  User?: boolean | UserArgs
  userId?: boolean
  comments?: boolean | FindManyCommentArgs
  Comment?: boolean | CommentArgs
  commentId?: boolean
}

export type CommentInclude = {
  Tweet?: boolean | TweetArgs
  User?: boolean | UserArgs
  comments?: boolean | FindManyCommentArgs
  Comment?: boolean | CommentArgs
}

export type CommentGetPayload<
  S extends boolean | null | undefined | CommentArgs,
  U = keyof S
> = S extends true
  ? Comment
  : S extends undefined
  ? never
  : S extends CommentArgs | FindManyCommentArgs
  ? 'include' extends U
    ? Comment  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Tweet'
      ? TweetGetPayload<S['include'][P]> | null :
      P extends 'User'
      ? UserGetPayload<S['include'][P]> | null :
      P extends 'comments'
      ? Array<CommentGetPayload<S['include'][P]>> :
      P extends 'Comment'
      ? CommentGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Comment ? Comment[P]
: 
      P extends 'Tweet'
      ? TweetGetPayload<S['select'][P]> | null :
      P extends 'User'
      ? UserGetPayload<S['select'][P]> | null :
      P extends 'comments'
      ? Array<CommentGetPayload<S['select'][P]>> :
      P extends 'Comment'
      ? CommentGetPayload<S['select'][P]> | null : never
    }
  : Comment
: Comment


export interface CommentDelegate {
  /**
   * Find zero or one Comment that matches the filter.
   * @param {FindOneCommentArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCommentArgs>(
    args: Subset<T, FindOneCommentArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
  /**
   * Find the first Comment that matches the filter.
   * @param {FindFirstCommentArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstCommentArgs>(
    args?: Subset<T, FindFirstCommentArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>
  /**
   * Find zero or more Comments that matches the filter.
   * @param {FindManyCommentArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Comments
   * const comments = await prisma.comment.findMany()
   * 
   * // Get first 10 Comments
   * const comments = await prisma.comment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyCommentArgs>(
    args?: Subset<T, FindManyCommentArgs>
  ): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>
  /**
   * Create a Comment.
   * @param {CommentCreateArgs} args - Arguments to create a Comment.
   * @example
   * // Create one Comment
   * const Comment = await prisma.comment.create({
   *   data: {
   *     // ... data to create a Comment
   *   }
   * })
   * 
  **/
  create<T extends CommentCreateArgs>(
    args: Subset<T, CommentCreateArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Delete a Comment.
   * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
   * @example
   * // Delete one Comment
   * const Comment = await prisma.comment.delete({
   *   where: {
   *     // ... filter to delete one Comment
   *   }
   * })
   * 
  **/
  delete<T extends CommentDeleteArgs>(
    args: Subset<T, CommentDeleteArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Update one Comment.
   * @param {CommentUpdateArgs} args - Arguments to update one Comment.
   * @example
   * // Update one Comment
   * const comment = await prisma.comment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CommentUpdateArgs>(
    args: Subset<T, CommentUpdateArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Delete zero or more Comments.
   * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
   * @example
   * // Delete a few Comments
   * const { count } = await prisma.comment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CommentDeleteManyArgs>(
    args: Subset<T, CommentDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Comments.
   * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Comments
   * const comment = await prisma.comment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CommentUpdateManyArgs>(
    args: Subset<T, CommentUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Comment.
   * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
   * @example
   * // Update or create a Comment
   * const comment = await prisma.comment.upsert({
   *   create: {
   *     // ... data to create a Comment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Comment we want to update
   *   }
   * })
  **/
  upsert<T extends CommentUpsertArgs>(
    args: Subset<T, CommentUpsertArgs>
  ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyCommentArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateCommentArgs>(args: Subset<T, AggregateCommentArgs>): Promise<GetCommentAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Comment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__CommentClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Tweet<T extends TweetArgs = {}>(args?: Subset<T, TweetArgs>): CheckSelect<T, Prisma__TweetClient<Tweet | null>, Prisma__TweetClient<TweetGetPayload<T> | null>>;

  User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

  Comment<T extends CommentArgs = {}>(args?: Subset<T, CommentArgs>): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Comment findOne
 */
export type FindOneCommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter, which Comment to fetch.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment findFirst
 */
export type FindFirstCommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter, which Comment to fetch.
  **/
  where?: CommentWhereInput
  orderBy?: Enumerable<CommentOrderByInput> | CommentOrderByInput
  cursor?: CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<CommentDistinctFieldEnum>
}


/**
 * Comment findMany
 */
export type FindManyCommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter, which Comments to fetch.
  **/
  where?: CommentWhereInput
  /**
   * Determine the order of the Comments to fetch.
  **/
  orderBy?: Enumerable<CommentOrderByInput> | CommentOrderByInput
  /**
   * Sets the position for listing Comments.
  **/
  cursor?: CommentWhereUniqueInput
  /**
   * The number of Comments to fetch. If negative number, it will take Comments before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Comments.
  **/
  skip?: number
  distinct?: Enumerable<CommentDistinctFieldEnum>
}


/**
 * Comment create
 */
export type CommentCreateArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The data needed to create a Comment.
  **/
  data: CommentCreateInput
}


/**
 * Comment update
 */
export type CommentUpdateArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The data needed to update a Comment.
  **/
  data: CommentUpdateInput
  /**
   * Choose, which Comment to update.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment updateMany
 */
export type CommentUpdateManyArgs = {
  data: CommentUpdateManyMutationInput
  where?: CommentWhereInput
}


/**
 * Comment upsert
 */
export type CommentUpsertArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * The filter to search for the Comment to update in case it exists.
  **/
  where: CommentWhereUniqueInput
  /**
   * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
  **/
  create: CommentCreateInput
  /**
   * In case the Comment was found with the provided `where` argument, update it with this data.
  **/
  update: CommentUpdateInput
}


/**
 * Comment delete
 */
export type CommentDeleteArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
  /**
   * Filter which Comment to delete.
  **/
  where: CommentWhereUniqueInput
}


/**
 * Comment deleteMany
 */
export type CommentDeleteManyArgs = {
  where?: CommentWhereInput
}


/**
 * Comment without action
 */
export type CommentArgs = {
  /**
   * Select specific fields to fetch from the Comment
  **/
  select?: CommentSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CommentInclude | null
}



/**
 * Deep Input Types
 */


export type TweetWhereInput = {
  AND?: TweetWhereInput | Enumerable<TweetWhereInput>
  OR?: TweetWhereInput | Enumerable<TweetWhereInput>
  NOT?: TweetWhereInput | Enumerable<TweetWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  content?: StringNullableFilter | string | null
  likes?: LikedTweetListRelationFilter
  author?: UserRelationFilter | UserWhereInput | null
  authorId?: IntNullableFilter | number | null
  comments?: CommentListRelationFilter
}

export type TweetOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  content?: SortOrder
  authorId?: SortOrder
}

export type TweetWhereUniqueInput = {
  id?: number
}

export type UserWhereInput = {
  AND?: UserWhereInput | Enumerable<UserWhereInput>
  OR?: UserWhereInput | Enumerable<UserWhereInput>
  NOT?: UserWhereInput | Enumerable<UserWhereInput>
  id?: IntFilter | number
  email?: StringFilter | string
  password?: StringFilter | string
  name?: StringNullableFilter | string | null
  tweets?: TweetListRelationFilter
  Profile?: ProfileRelationFilter | ProfileWhereInput | null
  likedTweet?: LikedTweetListRelationFilter
  comments?: CommentListRelationFilter
  Following?: FollowingListRelationFilter
}

export type UserOrderByInput = {
  id?: SortOrder
  email?: SortOrder
  password?: SortOrder
  name?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
  email?: string
}

export type LikedTweetWhereInput = {
  AND?: LikedTweetWhereInput | Enumerable<LikedTweetWhereInput>
  OR?: LikedTweetWhereInput | Enumerable<LikedTweetWhereInput>
  NOT?: LikedTweetWhereInput | Enumerable<LikedTweetWhereInput>
  id?: IntFilter | number
  tweet?: TweetRelationFilter | TweetWhereInput
  likedAt?: DateTimeFilter | Date | string
  userId?: IntNullableFilter | number | null
  User?: UserRelationFilter | UserWhereInput | null
  tweetId?: IntFilter | number
}

export type LikedTweetOrderByInput = {
  id?: SortOrder
  likedAt?: SortOrder
  userId?: SortOrder
  tweetId?: SortOrder
}

export type LikedTweetWhereUniqueInput = {
  id?: number
}

export type FollowingWhereInput = {
  AND?: FollowingWhereInput | Enumerable<FollowingWhereInput>
  OR?: FollowingWhereInput | Enumerable<FollowingWhereInput>
  NOT?: FollowingWhereInput | Enumerable<FollowingWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  avatar?: StringFilter | string
  followId?: IntFilter | number
  User?: UserRelationFilter | UserWhereInput | null
  userId?: IntNullableFilter | number | null
}

export type FollowingOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  avatar?: SortOrder
  followId?: SortOrder
  userId?: SortOrder
}

export type FollowingWhereUniqueInput = {
  id?: number
}

export type ProfileWhereInput = {
  AND?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  OR?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  NOT?: ProfileWhereInput | Enumerable<ProfileWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  bio?: StringNullableFilter | string | null
  location?: StringNullableFilter | string | null
  website?: StringNullableFilter | string | null
  avatar?: StringNullableFilter | string | null
  userId?: IntNullableFilter | number | null
  User?: UserRelationFilter | UserWhereInput | null
}

export type ProfileOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  bio?: SortOrder
  location?: SortOrder
  website?: SortOrder
  avatar?: SortOrder
  userId?: SortOrder
}

export type ProfileWhereUniqueInput = {
  id?: number
  userId?: number
}

export type CommentWhereInput = {
  AND?: CommentWhereInput | Enumerable<CommentWhereInput>
  OR?: CommentWhereInput | Enumerable<CommentWhereInput>
  NOT?: CommentWhereInput | Enumerable<CommentWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  content?: StringNullableFilter | string | null
  Tweet?: TweetRelationFilter | TweetWhereInput | null
  tweetId?: IntNullableFilter | number | null
  User?: UserRelationFilter | UserWhereInput | null
  userId?: IntNullableFilter | number | null
  comments?: CommentListRelationFilter
  Comment?: CommentRelationFilter | CommentWhereInput | null
  commentId?: IntNullableFilter | number | null
}

export type CommentOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  content?: SortOrder
  tweetId?: SortOrder
  userId?: SortOrder
  commentId?: SortOrder
}

export type CommentWhereUniqueInput = {
  id?: number
}

export type TweetCreateInput = {
  createdAt?: Date | string
  content?: string | null
  likes?: LikedTweetCreateManyWithoutTweetInput
  author?: UserCreateOneWithoutTweetsInput
  comments?: CommentCreateManyWithoutTweetInput
}

export type TweetUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  likes?: LikedTweetUpdateManyWithoutTweetInput
  author?: UserUpdateOneWithoutTweetsInput
  comments?: CommentUpdateManyWithoutTweetInput
}

export type TweetUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
}

export type UserCreateInput = {
  email: string
  password?: string
  name?: string | null
  tweets?: TweetCreateManyWithoutAuthorInput
  Profile?: ProfileCreateOneWithoutUserInput
  likedTweet?: LikedTweetCreateManyWithoutUserInput
  comments?: CommentCreateManyWithoutUserInput
  Following?: FollowingCreateManyWithoutUserInput
}

export type UserUpdateInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  tweets?: TweetUpdateManyWithoutAuthorInput
  Profile?: ProfileUpdateOneWithoutUserInput
  likedTweet?: LikedTweetUpdateManyWithoutUserInput
  comments?: CommentUpdateManyWithoutUserInput
  Following?: FollowingUpdateManyWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
}

export type LikedTweetCreateInput = {
  likedAt?: Date | string
  tweet: TweetCreateOneWithoutLikesInput
  User?: UserCreateOneWithoutLikedTweetInput
}

export type LikedTweetUpdateInput = {
  likedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  tweet?: TweetUpdateOneRequiredWithoutLikesInput
  User?: UserUpdateOneWithoutLikedTweetInput
}

export type LikedTweetUpdateManyMutationInput = {
  likedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type FollowingCreateInput = {
  name: string
  avatar: string
  followId: number
  User?: UserCreateOneWithoutFollowingInput
}

export type FollowingUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  avatar?: string | StringFieldUpdateOperationsInput
  followId?: number | IntFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutFollowingInput
}

export type FollowingUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  avatar?: string | StringFieldUpdateOperationsInput
  followId?: number | IntFieldUpdateOperationsInput
}

export type ProfileCreateInput = {
  createdAt?: Date | string
  bio?: string | null
  location?: string | null
  website?: string | null
  avatar?: string | null
  User?: UserCreateOneWithoutProfileInput
}

export type ProfileUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  bio?: string | NullableStringFieldUpdateOperationsInput | null
  location?: string | NullableStringFieldUpdateOperationsInput | null
  website?: string | NullableStringFieldUpdateOperationsInput | null
  avatar?: string | NullableStringFieldUpdateOperationsInput | null
  User?: UserUpdateOneWithoutProfileInput
}

export type ProfileUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  bio?: string | NullableStringFieldUpdateOperationsInput | null
  location?: string | NullableStringFieldUpdateOperationsInput | null
  website?: string | NullableStringFieldUpdateOperationsInput | null
  avatar?: string | NullableStringFieldUpdateOperationsInput | null
}

export type CommentCreateInput = {
  createdAt?: Date | string
  content?: string | null
  Tweet?: TweetCreateOneWithoutCommentsInput
  User?: UserCreateOneWithoutCommentsInput
  comments?: CommentCreateManyWithoutCommentInput
  Comment?: CommentCreateOneWithoutCommentsInput
}

export type CommentUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  Tweet?: TweetUpdateOneWithoutCommentsInput
  User?: UserUpdateOneWithoutCommentsInput
  comments?: CommentUpdateManyWithoutCommentInput
  Comment?: CommentUpdateOneWithoutCommentsInput
}

export type CommentUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringNullableFilter | null
}

export type LikedTweetListRelationFilter = {
  every?: LikedTweetWhereInput
  some?: LikedTweetWhereInput
  none?: LikedTweetWhereInput
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type CommentListRelationFilter = {
  every?: CommentWhereInput
  some?: CommentWhereInput
  none?: CommentWhereInput
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type TweetListRelationFilter = {
  every?: TweetWhereInput
  some?: TweetWhereInput
  none?: TweetWhereInput
}

export type ProfileRelationFilter = {
  is?: ProfileWhereInput | null
  isNot?: ProfileWhereInput | null
}

export type FollowingListRelationFilter = {
  every?: FollowingWhereInput
  some?: FollowingWhereInput
  none?: FollowingWhereInput
}

export type TweetRelationFilter = {
  is?: TweetWhereInput | null
  isNot?: TweetWhereInput | null
}

export type CommentRelationFilter = {
  is?: CommentWhereInput | null
  isNot?: CommentWhereInput | null
}

export type LikedTweetCreateManyWithoutTweetInput = {
  create?: LikedTweetCreateWithoutTweetInput | Enumerable<LikedTweetCreateWithoutTweetInput>
  connect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
}

export type UserCreateOneWithoutTweetsInput = {
  create?: UserCreateWithoutTweetsInput
  connect?: UserWhereUniqueInput
}

export type CommentCreateManyWithoutTweetInput = {
  create?: CommentCreateWithoutTweetInput | Enumerable<CommentCreateWithoutTweetInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type LikedTweetUpdateManyWithoutTweetInput = {
  create?: LikedTweetCreateWithoutTweetInput | Enumerable<LikedTweetCreateWithoutTweetInput>
  connect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  set?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  disconnect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  delete?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  update?: LikedTweetUpdateWithWhereUniqueWithoutTweetInput | Enumerable<LikedTweetUpdateWithWhereUniqueWithoutTweetInput>
  updateMany?: LikedTweetUpdateManyWithWhereNestedInput | Enumerable<LikedTweetUpdateManyWithWhereNestedInput>
  deleteMany?: LikedTweetScalarWhereInput | Enumerable<LikedTweetScalarWhereInput>
  upsert?: LikedTweetUpsertWithWhereUniqueWithoutTweetInput | Enumerable<LikedTweetUpsertWithWhereUniqueWithoutTweetInput>
}

export type UserUpdateOneWithoutTweetsInput = {
  create?: UserCreateWithoutTweetsInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutTweetsDataInput
  upsert?: UserUpsertWithoutTweetsInput
}

export type CommentUpdateManyWithoutTweetInput = {
  create?: CommentCreateWithoutTweetInput | Enumerable<CommentCreateWithoutTweetInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  set?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  disconnect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  delete?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  update?: CommentUpdateWithWhereUniqueWithoutTweetInput | Enumerable<CommentUpdateWithWhereUniqueWithoutTweetInput>
  updateMany?: CommentUpdateManyWithWhereNestedInput | Enumerable<CommentUpdateManyWithWhereNestedInput>
  deleteMany?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  upsert?: CommentUpsertWithWhereUniqueWithoutTweetInput | Enumerable<CommentUpsertWithWhereUniqueWithoutTweetInput>
}

export type TweetCreateManyWithoutAuthorInput = {
  create?: TweetCreateWithoutAuthorInput | Enumerable<TweetCreateWithoutAuthorInput>
  connect?: TweetWhereUniqueInput | Enumerable<TweetWhereUniqueInput>
}

export type ProfileCreateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
}

export type LikedTweetCreateManyWithoutUserInput = {
  create?: LikedTweetCreateWithoutUserInput | Enumerable<LikedTweetCreateWithoutUserInput>
  connect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
}

export type CommentCreateManyWithoutUserInput = {
  create?: CommentCreateWithoutUserInput | Enumerable<CommentCreateWithoutUserInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
}

export type FollowingCreateManyWithoutUserInput = {
  create?: FollowingCreateWithoutUserInput | Enumerable<FollowingCreateWithoutUserInput>
  connect?: FollowingWhereUniqueInput | Enumerable<FollowingWhereUniqueInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type TweetUpdateManyWithoutAuthorInput = {
  create?: TweetCreateWithoutAuthorInput | Enumerable<TweetCreateWithoutAuthorInput>
  connect?: TweetWhereUniqueInput | Enumerable<TweetWhereUniqueInput>
  set?: TweetWhereUniqueInput | Enumerable<TweetWhereUniqueInput>
  disconnect?: TweetWhereUniqueInput | Enumerable<TweetWhereUniqueInput>
  delete?: TweetWhereUniqueInput | Enumerable<TweetWhereUniqueInput>
  update?: TweetUpdateWithWhereUniqueWithoutAuthorInput | Enumerable<TweetUpdateWithWhereUniqueWithoutAuthorInput>
  updateMany?: TweetUpdateManyWithWhereNestedInput | Enumerable<TweetUpdateManyWithWhereNestedInput>
  deleteMany?: TweetScalarWhereInput | Enumerable<TweetScalarWhereInput>
  upsert?: TweetUpsertWithWhereUniqueWithoutAuthorInput | Enumerable<TweetUpsertWithWhereUniqueWithoutAuthorInput>
}

export type ProfileUpdateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: ProfileUpdateWithoutUserDataInput
  upsert?: ProfileUpsertWithoutUserInput
}

export type LikedTweetUpdateManyWithoutUserInput = {
  create?: LikedTweetCreateWithoutUserInput | Enumerable<LikedTweetCreateWithoutUserInput>
  connect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  set?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  disconnect?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  delete?: LikedTweetWhereUniqueInput | Enumerable<LikedTweetWhereUniqueInput>
  update?: LikedTweetUpdateWithWhereUniqueWithoutUserInput | Enumerable<LikedTweetUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: LikedTweetUpdateManyWithWhereNestedInput | Enumerable<LikedTweetUpdateManyWithWhereNestedInput>
  deleteMany?: LikedTweetScalarWhereInput | Enumerable<LikedTweetScalarWhereInput>
  upsert?: LikedTweetUpsertWithWhereUniqueWithoutUserInput | Enumerable<LikedTweetUpsertWithWhereUniqueWithoutUserInput>
}

export type CommentUpdateManyWithoutUserInput = {
  create?: CommentCreateWithoutUserInput | Enumerable<CommentCreateWithoutUserInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  set?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  disconnect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  delete?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  update?: CommentUpdateWithWhereUniqueWithoutUserInput | Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: CommentUpdateManyWithWhereNestedInput | Enumerable<CommentUpdateManyWithWhereNestedInput>
  deleteMany?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
}

export type FollowingUpdateManyWithoutUserInput = {
  create?: FollowingCreateWithoutUserInput | Enumerable<FollowingCreateWithoutUserInput>
  connect?: FollowingWhereUniqueInput | Enumerable<FollowingWhereUniqueInput>
  set?: FollowingWhereUniqueInput | Enumerable<FollowingWhereUniqueInput>
  disconnect?: FollowingWhereUniqueInput | Enumerable<FollowingWhereUniqueInput>
  delete?: FollowingWhereUniqueInput | Enumerable<FollowingWhereUniqueInput>
  update?: FollowingUpdateWithWhereUniqueWithoutUserInput | Enumerable<FollowingUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: FollowingUpdateManyWithWhereNestedInput | Enumerable<FollowingUpdateManyWithWhereNestedInput>
  deleteMany?: FollowingScalarWhereInput | Enumerable<FollowingScalarWhereInput>
  upsert?: FollowingUpsertWithWhereUniqueWithoutUserInput | Enumerable<FollowingUpsertWithWhereUniqueWithoutUserInput>
}

export type TweetCreateOneWithoutLikesInput = {
  create?: TweetCreateWithoutLikesInput
  connect?: TweetWhereUniqueInput
}

export type UserCreateOneWithoutLikedTweetInput = {
  create?: UserCreateWithoutLikedTweetInput
  connect?: UserWhereUniqueInput
}

export type TweetUpdateOneRequiredWithoutLikesInput = {
  create?: TweetCreateWithoutLikesInput
  connect?: TweetWhereUniqueInput
  update?: TweetUpdateWithoutLikesDataInput
  upsert?: TweetUpsertWithoutLikesInput
}

export type UserUpdateOneWithoutLikedTweetInput = {
  create?: UserCreateWithoutLikedTweetInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutLikedTweetDataInput
  upsert?: UserUpsertWithoutLikedTweetInput
}

export type UserCreateOneWithoutFollowingInput = {
  create?: UserCreateWithoutFollowingInput
  connect?: UserWhereUniqueInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type UserUpdateOneWithoutFollowingInput = {
  create?: UserCreateWithoutFollowingInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutFollowingDataInput
  upsert?: UserUpsertWithoutFollowingInput
}

export type UserCreateOneWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
}

export type UserUpdateOneWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutProfileDataInput
  upsert?: UserUpsertWithoutProfileInput
}

export type TweetCreateOneWithoutCommentsInput = {
  create?: TweetCreateWithoutCommentsInput
  connect?: TweetWhereUniqueInput
}

export type UserCreateOneWithoutCommentsInput = {
  create?: UserCreateWithoutCommentsInput
  connect?: UserWhereUniqueInput
}

export type CommentCreateManyWithoutCommentInput = {
  create?: CommentCreateWithoutCommentInput | Enumerable<CommentCreateWithoutCommentInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
}

export type CommentCreateOneWithoutCommentsInput = {
  create?: CommentCreateWithoutCommentsInput
  connect?: CommentWhereUniqueInput
}

export type TweetUpdateOneWithoutCommentsInput = {
  create?: TweetCreateWithoutCommentsInput
  connect?: TweetWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: TweetUpdateWithoutCommentsDataInput
  upsert?: TweetUpsertWithoutCommentsInput
}

export type UserUpdateOneWithoutCommentsInput = {
  create?: UserCreateWithoutCommentsInput
  connect?: UserWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: UserUpdateWithoutCommentsDataInput
  upsert?: UserUpsertWithoutCommentsInput
}

export type CommentUpdateManyWithoutCommentInput = {
  create?: CommentCreateWithoutCommentInput | Enumerable<CommentCreateWithoutCommentInput>
  connect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  set?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  disconnect?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  delete?: CommentWhereUniqueInput | Enumerable<CommentWhereUniqueInput>
  update?: CommentUpdateWithWhereUniqueWithoutCommentInput | Enumerable<CommentUpdateWithWhereUniqueWithoutCommentInput>
  updateMany?: CommentUpdateManyWithWhereNestedInput | Enumerable<CommentUpdateManyWithWhereNestedInput>
  deleteMany?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  upsert?: CommentUpsertWithWhereUniqueWithoutCommentInput | Enumerable<CommentUpsertWithWhereUniqueWithoutCommentInput>
}

export type CommentUpdateOneWithoutCommentsInput = {
  create?: CommentCreateWithoutCommentsInput
  connect?: CommentWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: CommentUpdateWithoutCommentsDataInput
  upsert?: CommentUpsertWithoutCommentsInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringNullableFilter | null
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type LikedTweetCreateWithoutTweetInput = {
  likedAt?: Date | string
  User?: UserCreateOneWithoutLikedTweetInput
}

export type UserCreateWithoutTweetsInput = {
  email: string
  password?: string
  name?: string | null
  Profile?: ProfileCreateOneWithoutUserInput
  likedTweet?: LikedTweetCreateManyWithoutUserInput
  comments?: CommentCreateManyWithoutUserInput
  Following?: FollowingCreateManyWithoutUserInput
}

export type CommentCreateWithoutTweetInput = {
  createdAt?: Date | string
  content?: string | null
  User?: UserCreateOneWithoutCommentsInput
  comments?: CommentCreateManyWithoutCommentInput
  Comment?: CommentCreateOneWithoutCommentsInput
}

export type LikedTweetUpdateWithWhereUniqueWithoutTweetInput = {
  where: LikedTweetWhereUniqueInput
  data: LikedTweetUpdateWithoutTweetDataInput
}

export type LikedTweetUpdateManyWithWhereNestedInput = {
  where: LikedTweetScalarWhereInput
  data: LikedTweetUpdateManyDataInput
}

export type LikedTweetScalarWhereInput = {
  AND?: LikedTweetScalarWhereInput | Enumerable<LikedTweetScalarWhereInput>
  OR?: LikedTweetScalarWhereInput | Enumerable<LikedTweetScalarWhereInput>
  NOT?: LikedTweetScalarWhereInput | Enumerable<LikedTweetScalarWhereInput>
  id?: IntFilter | number
  likedAt?: DateTimeFilter | Date | string
  userId?: IntNullableFilter | number | null
  tweetId?: IntFilter | number
}

export type LikedTweetUpsertWithWhereUniqueWithoutTweetInput = {
  where: LikedTweetWhereUniqueInput
  update: LikedTweetUpdateWithoutTweetDataInput
  create: LikedTweetCreateWithoutTweetInput
}

export type UserUpdateWithoutTweetsDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  Profile?: ProfileUpdateOneWithoutUserInput
  likedTweet?: LikedTweetUpdateManyWithoutUserInput
  comments?: CommentUpdateManyWithoutUserInput
  Following?: FollowingUpdateManyWithoutUserInput
}

export type UserUpsertWithoutTweetsInput = {
  update: UserUpdateWithoutTweetsDataInput
  create: UserCreateWithoutTweetsInput
}

export type CommentUpdateWithWhereUniqueWithoutTweetInput = {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutTweetDataInput
}

export type CommentUpdateManyWithWhereNestedInput = {
  where: CommentScalarWhereInput
  data: CommentUpdateManyDataInput
}

export type CommentScalarWhereInput = {
  AND?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  OR?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  NOT?: CommentScalarWhereInput | Enumerable<CommentScalarWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  content?: StringNullableFilter | string | null
  tweetId?: IntNullableFilter | number | null
  userId?: IntNullableFilter | number | null
  commentId?: IntNullableFilter | number | null
}

export type CommentUpsertWithWhereUniqueWithoutTweetInput = {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutTweetDataInput
  create: CommentCreateWithoutTweetInput
}

export type TweetCreateWithoutAuthorInput = {
  createdAt?: Date | string
  content?: string | null
  likes?: LikedTweetCreateManyWithoutTweetInput
  comments?: CommentCreateManyWithoutTweetInput
}

export type ProfileCreateWithoutUserInput = {
  createdAt?: Date | string
  bio?: string | null
  location?: string | null
  website?: string | null
  avatar?: string | null
}

export type LikedTweetCreateWithoutUserInput = {
  likedAt?: Date | string
  tweet: TweetCreateOneWithoutLikesInput
}

export type CommentCreateWithoutUserInput = {
  createdAt?: Date | string
  content?: string | null
  Tweet?: TweetCreateOneWithoutCommentsInput
  comments?: CommentCreateManyWithoutCommentInput
  Comment?: CommentCreateOneWithoutCommentsInput
}

export type FollowingCreateWithoutUserInput = {
  name: string
  avatar: string
  followId: number
}

export type TweetUpdateWithWhereUniqueWithoutAuthorInput = {
  where: TweetWhereUniqueInput
  data: TweetUpdateWithoutAuthorDataInput
}

export type TweetUpdateManyWithWhereNestedInput = {
  where: TweetScalarWhereInput
  data: TweetUpdateManyDataInput
}

export type TweetScalarWhereInput = {
  AND?: TweetScalarWhereInput | Enumerable<TweetScalarWhereInput>
  OR?: TweetScalarWhereInput | Enumerable<TweetScalarWhereInput>
  NOT?: TweetScalarWhereInput | Enumerable<TweetScalarWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  content?: StringNullableFilter | string | null
  authorId?: IntNullableFilter | number | null
}

export type TweetUpsertWithWhereUniqueWithoutAuthorInput = {
  where: TweetWhereUniqueInput
  update: TweetUpdateWithoutAuthorDataInput
  create: TweetCreateWithoutAuthorInput
}

export type ProfileUpdateWithoutUserDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  bio?: string | NullableStringFieldUpdateOperationsInput | null
  location?: string | NullableStringFieldUpdateOperationsInput | null
  website?: string | NullableStringFieldUpdateOperationsInput | null
  avatar?: string | NullableStringFieldUpdateOperationsInput | null
}

export type ProfileUpsertWithoutUserInput = {
  update: ProfileUpdateWithoutUserDataInput
  create: ProfileCreateWithoutUserInput
}

export type LikedTweetUpdateWithWhereUniqueWithoutUserInput = {
  where: LikedTweetWhereUniqueInput
  data: LikedTweetUpdateWithoutUserDataInput
}

export type LikedTweetUpsertWithWhereUniqueWithoutUserInput = {
  where: LikedTweetWhereUniqueInput
  update: LikedTweetUpdateWithoutUserDataInput
  create: LikedTweetCreateWithoutUserInput
}

export type CommentUpdateWithWhereUniqueWithoutUserInput = {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutUserDataInput
}

export type CommentUpsertWithWhereUniqueWithoutUserInput = {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutUserDataInput
  create: CommentCreateWithoutUserInput
}

export type FollowingUpdateWithWhereUniqueWithoutUserInput = {
  where: FollowingWhereUniqueInput
  data: FollowingUpdateWithoutUserDataInput
}

export type FollowingUpdateManyWithWhereNestedInput = {
  where: FollowingScalarWhereInput
  data: FollowingUpdateManyDataInput
}

export type FollowingScalarWhereInput = {
  AND?: FollowingScalarWhereInput | Enumerable<FollowingScalarWhereInput>
  OR?: FollowingScalarWhereInput | Enumerable<FollowingScalarWhereInput>
  NOT?: FollowingScalarWhereInput | Enumerable<FollowingScalarWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  avatar?: StringFilter | string
  followId?: IntFilter | number
  userId?: IntNullableFilter | number | null
}

export type FollowingUpsertWithWhereUniqueWithoutUserInput = {
  where: FollowingWhereUniqueInput
  update: FollowingUpdateWithoutUserDataInput
  create: FollowingCreateWithoutUserInput
}

export type TweetCreateWithoutLikesInput = {
  createdAt?: Date | string
  content?: string | null
  author?: UserCreateOneWithoutTweetsInput
  comments?: CommentCreateManyWithoutTweetInput
}

export type UserCreateWithoutLikedTweetInput = {
  email: string
  password?: string
  name?: string | null
  tweets?: TweetCreateManyWithoutAuthorInput
  Profile?: ProfileCreateOneWithoutUserInput
  comments?: CommentCreateManyWithoutUserInput
  Following?: FollowingCreateManyWithoutUserInput
}

export type TweetUpdateWithoutLikesDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  author?: UserUpdateOneWithoutTweetsInput
  comments?: CommentUpdateManyWithoutTweetInput
}

export type TweetUpsertWithoutLikesInput = {
  update: TweetUpdateWithoutLikesDataInput
  create: TweetCreateWithoutLikesInput
}

export type UserUpdateWithoutLikedTweetDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  tweets?: TweetUpdateManyWithoutAuthorInput
  Profile?: ProfileUpdateOneWithoutUserInput
  comments?: CommentUpdateManyWithoutUserInput
  Following?: FollowingUpdateManyWithoutUserInput
}

export type UserUpsertWithoutLikedTweetInput = {
  update: UserUpdateWithoutLikedTweetDataInput
  create: UserCreateWithoutLikedTweetInput
}

export type UserCreateWithoutFollowingInput = {
  email: string
  password?: string
  name?: string | null
  tweets?: TweetCreateManyWithoutAuthorInput
  Profile?: ProfileCreateOneWithoutUserInput
  likedTweet?: LikedTweetCreateManyWithoutUserInput
  comments?: CommentCreateManyWithoutUserInput
}

export type UserUpdateWithoutFollowingDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  tweets?: TweetUpdateManyWithoutAuthorInput
  Profile?: ProfileUpdateOneWithoutUserInput
  likedTweet?: LikedTweetUpdateManyWithoutUserInput
  comments?: CommentUpdateManyWithoutUserInput
}

export type UserUpsertWithoutFollowingInput = {
  update: UserUpdateWithoutFollowingDataInput
  create: UserCreateWithoutFollowingInput
}

export type UserCreateWithoutProfileInput = {
  email: string
  password?: string
  name?: string | null
  tweets?: TweetCreateManyWithoutAuthorInput
  likedTweet?: LikedTweetCreateManyWithoutUserInput
  comments?: CommentCreateManyWithoutUserInput
  Following?: FollowingCreateManyWithoutUserInput
}

export type UserUpdateWithoutProfileDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  tweets?: TweetUpdateManyWithoutAuthorInput
  likedTweet?: LikedTweetUpdateManyWithoutUserInput
  comments?: CommentUpdateManyWithoutUserInput
  Following?: FollowingUpdateManyWithoutUserInput
}

export type UserUpsertWithoutProfileInput = {
  update: UserUpdateWithoutProfileDataInput
  create: UserCreateWithoutProfileInput
}

export type TweetCreateWithoutCommentsInput = {
  createdAt?: Date | string
  content?: string | null
  likes?: LikedTweetCreateManyWithoutTweetInput
  author?: UserCreateOneWithoutTweetsInput
}

export type UserCreateWithoutCommentsInput = {
  email: string
  password?: string
  name?: string | null
  tweets?: TweetCreateManyWithoutAuthorInput
  Profile?: ProfileCreateOneWithoutUserInput
  likedTweet?: LikedTweetCreateManyWithoutUserInput
  Following?: FollowingCreateManyWithoutUserInput
}

export type CommentCreateWithoutCommentInput = {
  createdAt?: Date | string
  content?: string | null
  Tweet?: TweetCreateOneWithoutCommentsInput
  User?: UserCreateOneWithoutCommentsInput
  comments?: CommentCreateManyWithoutCommentInput
}

export type CommentCreateWithoutCommentsInput = {
  createdAt?: Date | string
  content?: string | null
  Tweet?: TweetCreateOneWithoutCommentsInput
  User?: UserCreateOneWithoutCommentsInput
  Comment?: CommentCreateOneWithoutCommentsInput
}

export type TweetUpdateWithoutCommentsDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  likes?: LikedTweetUpdateManyWithoutTweetInput
  author?: UserUpdateOneWithoutTweetsInput
}

export type TweetUpsertWithoutCommentsInput = {
  update: TweetUpdateWithoutCommentsDataInput
  create: TweetCreateWithoutCommentsInput
}

export type UserUpdateWithoutCommentsDataInput = {
  email?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  name?: string | NullableStringFieldUpdateOperationsInput | null
  tweets?: TweetUpdateManyWithoutAuthorInput
  Profile?: ProfileUpdateOneWithoutUserInput
  likedTweet?: LikedTweetUpdateManyWithoutUserInput
  Following?: FollowingUpdateManyWithoutUserInput
}

export type UserUpsertWithoutCommentsInput = {
  update: UserUpdateWithoutCommentsDataInput
  create: UserCreateWithoutCommentsInput
}

export type CommentUpdateWithWhereUniqueWithoutCommentInput = {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutCommentDataInput
}

export type CommentUpsertWithWhereUniqueWithoutCommentInput = {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutCommentDataInput
  create: CommentCreateWithoutCommentInput
}

export type CommentUpdateWithoutCommentsDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  Tweet?: TweetUpdateOneWithoutCommentsInput
  User?: UserUpdateOneWithoutCommentsInput
  Comment?: CommentUpdateOneWithoutCommentsInput
}

export type CommentUpsertWithoutCommentsInput = {
  update: CommentUpdateWithoutCommentsDataInput
  create: CommentCreateWithoutCommentsInput
}

export type LikedTweetUpdateWithoutTweetDataInput = {
  likedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  User?: UserUpdateOneWithoutLikedTweetInput
}

export type LikedTweetUpdateManyDataInput = {
  likedAt?: Date | string | DateTimeFieldUpdateOperationsInput
}

export type CommentUpdateWithoutTweetDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  User?: UserUpdateOneWithoutCommentsInput
  comments?: CommentUpdateManyWithoutCommentInput
  Comment?: CommentUpdateOneWithoutCommentsInput
}

export type CommentUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
}

export type TweetUpdateWithoutAuthorDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  likes?: LikedTweetUpdateManyWithoutTweetInput
  comments?: CommentUpdateManyWithoutTweetInput
}

export type TweetUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
}

export type LikedTweetUpdateWithoutUserDataInput = {
  likedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  tweet?: TweetUpdateOneRequiredWithoutLikesInput
}

export type CommentUpdateWithoutUserDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  Tweet?: TweetUpdateOneWithoutCommentsInput
  comments?: CommentUpdateManyWithoutCommentInput
  Comment?: CommentUpdateOneWithoutCommentsInput
}

export type FollowingUpdateWithoutUserDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  avatar?: string | StringFieldUpdateOperationsInput
  followId?: number | IntFieldUpdateOperationsInput
}

export type FollowingUpdateManyDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  avatar?: string | StringFieldUpdateOperationsInput
  followId?: number | IntFieldUpdateOperationsInput
}

export type CommentUpdateWithoutCommentDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  content?: string | NullableStringFieldUpdateOperationsInput | null
  Tweet?: TweetUpdateOneWithoutCommentsInput
  User?: UserUpdateOneWithoutCommentsInput
  comments?: CommentUpdateManyWithoutCommentInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
